name: Smoke Tests and ECR Upload

on:
  repository_dispatch:
    types: [deploy]
jobs:
  smoke-tests:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Infra Code
        uses: actions/checkout@v4
        
      - name: Checkout Application Code
        uses: actions/checkout@v4
        with:
          repository: drshooby/Sharenet-Vue-Spa
          ref: ${{ github.event.client_payload.ref }}
          path: app
          token: ${{ secrets.PAT }}

      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install Dependencies
        run: pip install boto3 paramiko
      
      - name: Create Temporary EC2
        env:
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_TABLE: ${{ secrets.MYSQL_TABLE }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
          VUE_APP_GOOGLE_MAPS_API_KEY: ${{ secrets.VUE_APP_GOOGLE_MAPS_API_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          PEM: ${{ secrets.PEM }}
        run: python scripts/ec2/deploy_tmp_ec2.py

      - name: Add Dockerignore Before ECR Upload
        run: |
          cd app/backend
          echo "tests/" > .dockerignore
          ls -a

      ### THESE NEED TO BE SET UP
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Send Docker Images to Amazon ECR in Parallel
        run: |
          docker build -t $REGISTRY/$REPOSITORY_FRONTEND:$IMAGE_TAG app/frontend &
          docker build -t $REGISTRY/$REPOSITORY_BACKEND:$IMAGE_TAG app/backend &
          wait
          
          docker push $REGISTRY/$REPOSITORY_FRONTEND:$IMAGE_TAG &
          docker push $REGISTRY/$REPOSITORY_FRONTEND:latest &
          docker push $REGISTRY/$REPOSITORY_BACKEND:$IMAGE_TAG &
          docker push $REGISTRY/$REPOSITORY_BACKEND:latest &
          wait
